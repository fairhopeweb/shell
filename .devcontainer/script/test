#!/bin/bash
set -ex
touch .env
export DOCKER_BUILDKIT=1
docker compose \
  -f .devcontainer/docker-compose.yml \
  -f .devcontainer/docker-compose.test.yml \
  -f .devcontainer/docker-compose.docker-from-docker.yml \
  down \
  --volumes \
  --remove-orphans \
  || true
docker compose \
  -f .devcontainer/docker-compose.yml \
  -f .devcontainer/docker-compose.test.yml \
  -f .devcontainer/docker-compose.docker-from-docker.yml \
  up \
  -d \
  --build \
  --always-recreate-deps \
  --force-recreate \
  --remove-orphans \
  --renew-anon-volumes

SECONDS=0

trap 'docker compose \
  -f .devcontainer/docker-compose.yml \
  -f .devcontainer/docker-compose.test.yml \
  -f .devcontainer/docker-compose.docker-from-docker.yml \
  logs && \
  docker compose \
  -f .devcontainer/docker-compose.yml \
  -f .devcontainer/docker-compose.test.yml \
  -f .devcontainer/docker-compose.docker-from-docker.yml \
  down \
  --volumes \
  --remove-orphans' EXIT

devcontainer_name=$(docker ps | grep app[-_]1 | head -n 1 | rev | awk '{print $1}' | rev)

set +x
printf "Waiting for app container..."
until [ "$(docker inspect $devcontainer_name --format='{{.State.ExitCode}}')" != "" ]; do
  printf .
  if [ $SECONDS -gt 300 ]; then
    echo "timeout"
    exit 1
  fi
  sleep 5
done
echo ""

status=$(docker inspect $devcontainer_name --format='{{.State.ExitCode}}')
if [ $status == "0" ]; then
  echo "Success!"
  exit 0
else
  echo "Failure!"
  exit 1
fi