name: Build Docker Image - Required

env:
  DOCKER_BUILDKIT: '1'
  BUILDKIT_PROGRESS: 'plain'

concurrency:
  group: ${{ github.event_name }}-${{ github.event.action }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    # Build and push cased/shell:vX.X.X images on push to tags matching vX.X.X
    tags:
      - v*
  # Build and push images on PRs with the docker:pr-image label
  pull_request:
    types:
      - opened
      - labeled
      - synchronize
  # Support manual builds
  workflow_dispatch:
  schedule:
    # Keep the build cache warm by running a weekly build on the default branch
    # https://github.com/actions/cache#cache-limits
    # > Caches that are not accessed within the last week will also be evicted.
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on:
      group: Default Larger Runners
      labels: ubuntu-latest-4-cores
    if: |
      github.event.action == 'opened' ||
      github.event.action == 'synchronize' ||
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      ( github.event.action == 'labeled' && github.event.label.name == 'docker:pr-image')
    strategy:
      fail-fast: false
      matrix:
        image:
          - name: shell
            context: ./
            dockerfile: Dockerfile
            vuln-type: os,library
            # Skip linux/arm64/v8 for now as it takes 1h+ and is not required for M1/M2 Mac OS VS Code usage
            # Also https://support.github.com/ticket/personal/0/1858013 causes regular failures
            platforms: linux/amd64
          - name: sshd-demo
            context: .devcontainer/sshd
            dockerfile: .devcontainer/sshd/Dockerfile
            vuln-type: os,library
            platforms: linux/amd64,linux/arm64/v8
          - name: shell-devcontainer
            context: ./
            dockerfile: .devcontainer/Dockerfile
            # TODO
            # vuln-type: os,library
            vuln-type: os
            platforms: linux/amd64,linux/arm64/v8
            args: |
              NODE_VERSION=lts/*

    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - id: docker_meta
        uses: docker/metadata-action@v3
        with:
          github-token: ${{ github.token }}
          images: |
            ghcr.io/cased/${{ matrix.image.name }}
          tags: |
            type=raw,enable=${{ endsWith(github.ref, github.event.repository.default_branch) && matrix.image.name == 'shell' }},value=unstable
            type=raw,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }},value=${{ github.event.repository.default_branch }}
            type=raw,enable=${{ contains(github.event.pull_request.labels.*.name, 'docker:pr-image') }},value=pr-${{ github.event.pull_request.number }}
            type=semver,pattern=v{{version}}
          labels: |
            org.opencontainers.image.title=Cased Shell
            org.opencontainers.image.description=The terminal for teams

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: scan dockerfile
        uses: aquasecurity/trivy-action@0.8.0
        with:
          scan-type: 'config'
          scan-ref: ${{ matrix.image.dockerfile }}
          trivyignores: ${{ matrix.image.context }}/.trivyignore

      - name: build
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: ${{ matrix.image.platforms }}
          build-args: |
            ${{ matrix.image.args }}
            GIT_SHA=${{ github.sha }}
          pull: true
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
            ghcr.io/cased/${{ matrix.image.name }}:${{ github.sha }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}:${{ github.event.repository.default_branch }}
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}:${{ contains(github.event.pull_request.labels.*.name, 'docker:pr-image') && format('pr-{0}', github.event.number) || github.event.repository.default_branch }}
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}-cache:${{ github.event.repository.default_branch }}
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}-cache:${{ contains(github.event.pull_request.labels.*.name, 'docker:pr-image') && format('pr-{0}', github.event.number) || github.event.repository.default_branch }}
            type=gha,scope=${{ matrix.image.name }}-${{ github.event.repository.default_branch }}
            type=gha,scope=${{ matrix.image.name }}-${{ github.ref_name }}

      - name: cache
        uses: docker/build-push-action@v3
        continue-on-error: true
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: ${{ matrix.image.platforms }}
          build-args: |
            ${{ matrix.image.args }}
            GIT_SHA=${{ github.sha }}
          pull: true
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
            ghcr.io/cased/${{ matrix.image.name }}:${{ github.sha }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}:${{ github.event.repository.default_branch }}
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}:${{ contains(github.event.pull_request.labels.*.name, 'docker:pr-image') && format('pr-{0}', github.event.number) || github.event.repository.default_branch }}
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}-cache:${{ github.event.repository.default_branch }}
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}-cache:${{ contains(github.event.pull_request.labels.*.name, 'docker:pr-image') && format('pr-{0}', github.event.number) || github.event.repository.default_branch }}
            type=gha,scope=${{ matrix.image.name }}-${{ github.event.repository.default_branch }}
            type=gha,scope=${{ matrix.image.name }}-${{ github.ref_name }}
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.image.name }}-${{ github.ref_name }}

      - name: push
        if: startsWith(github.ref, 'refs/tags/') || github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || contains(github.event.pull_request.labels.*.name, 'docker:pr-image')
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: ${{ matrix.image.platforms }}
          build-args: |
            ${{ matrix.image.args }}
            GIT_SHA=${{ github.sha }}
          pull: true
          push: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || contains(github.event.pull_request.labels.*.name, 'docker:pr-image') }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}:${{ github.event.repository.default_branch }}
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}:${{ contains(github.event.pull_request.labels.*.name, 'docker:pr-image') && format('pr-{0}', github.event.number) || github.event.repository.default_branch }}
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}-cache:${{ github.event.repository.default_branch }}
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}-cache:${{ contains(github.event.pull_request.labels.*.name, 'docker:pr-image') && format('pr-{0}', github.event.number) || github.event.repository.default_branch }}
            type=gha,scope=${{ matrix.image.name }}-${{ github.event.repository.default_branch }}
            type=gha,scope=${{ matrix.image.name }}-${{ github.ref_name }}
          cache-to: |
            type=registry,ref=ghcr.io/cased/${{ matrix.image.name }}-cache:${{ github.event.number == 0 && (startsWith(github.ref, 'refs/tags/') && 'latest' || github.event.repository.default_branch) || format('pr-{0}', github.event.number) }},mode=max

  dispatch-dependency-updates:
    name: dispatch dependency updates
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name != 'schedule' && (
        startsWith(github.ref, 'refs/tags/') || 
        github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || 
        contains(github.event.pull_request.labels.*.name, 'docker:pr-image')
      )
    steps:
      - name: get renovate token
        id: get_token
        uses: machine-learning-apps/actions-app-token@master
        with:
          APP_PEM: ${{ secrets.RENOVATE_APP_PEM }}
          APP_ID: ${{ secrets.RENOVATE_APP_ID }}

      - name: dispatch renovate workflow on cased/shell-kots
        uses: actions/github-script@c713e510dbd7d213d92d41b7a7805a986f4c5c66 # tag=v6.2.0
        timeout-minutes: 1
        with:
          github-token: ${{ steps.get_token.outputs.app_token }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: 'shell-kots',
              workflow_id: '.github/workflows/renovate.yaml',
              ref: 'main'
            })
